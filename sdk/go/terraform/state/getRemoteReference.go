// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package state

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-terraform/sdk/v6/go/terraform/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Access state from a remote backend.
func GetRemoteReference(ctx *pulumi.Context, args *GetRemoteReferenceArgs, opts ...pulumi.InvokeOption) (*GetRemoteReferenceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRemoteReferenceResult
	err := ctx.Invoke("terraform:state:getRemoteReference", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetRemoteReferenceArgs struct {
	// The remote backend hostname to connect to.
	Hostname *string `pulumi:"hostname"`
	// The name of the organization containing the targeted workspace(s).
	Organization string `pulumi:"organization"`
	// The token used to authenticate with the remote backend.
	Token      *string    `pulumi:"token"`
	Workspaces Workspaces `pulumi:"workspaces"`
}

// Defaults sets the appropriate defaults for GetRemoteReferenceArgs
func (val *GetRemoteReferenceArgs) Defaults() *GetRemoteReferenceArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Hostname == nil {
		hostname_ := "app.terraform.io"
		tmp.Hostname = &hostname_
	}
	return &tmp
}

// The result of fetching from a Terraform state store.
type GetRemoteReferenceResult struct {
	// The outputs displayed from Terraform state.
	Outputs map[string]interface{} `pulumi:"outputs"`
}

func GetRemoteReferenceOutput(ctx *pulumi.Context, args GetRemoteReferenceOutputArgs, opts ...pulumi.InvokeOption) GetRemoteReferenceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRemoteReferenceResultOutput, error) {
			args := v.(GetRemoteReferenceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("terraform:state:getRemoteReference", args.Defaults(), GetRemoteReferenceResultOutput{}, options).(GetRemoteReferenceResultOutput), nil
		}).(GetRemoteReferenceResultOutput)
}

type GetRemoteReferenceOutputArgs struct {
	// The remote backend hostname to connect to.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The name of the organization containing the targeted workspace(s).
	Organization pulumi.StringInput `pulumi:"organization"`
	// The token used to authenticate with the remote backend.
	Token      pulumi.StringPtrInput `pulumi:"token"`
	Workspaces WorkspacesInput       `pulumi:"workspaces"`
}

func (GetRemoteReferenceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteReferenceArgs)(nil)).Elem()
}

// The result of fetching from a Terraform state store.
type GetRemoteReferenceResultOutput struct{ *pulumi.OutputState }

func (GetRemoteReferenceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteReferenceResult)(nil)).Elem()
}

func (o GetRemoteReferenceResultOutput) ToGetRemoteReferenceResultOutput() GetRemoteReferenceResultOutput {
	return o
}

func (o GetRemoteReferenceResultOutput) ToGetRemoteReferenceResultOutputWithContext(ctx context.Context) GetRemoteReferenceResultOutput {
	return o
}

// The outputs displayed from Terraform state.
func (o GetRemoteReferenceResultOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v GetRemoteReferenceResult) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRemoteReferenceResultOutput{})
}
