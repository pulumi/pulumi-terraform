// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Access state from a remote backend.
 */
export function remoteStateReference(args: RemoteStateReferenceArgs, opts?: pulumi.InvokeOptions): Promise<RemoteStateReferenceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("terraform:index:remoteStateReference", {
        "hostname": args.hostname,
        "organization": args.organization,
        "token": args.token,
        "workspaces": args.workspaces,
    }, opts);
}

export interface RemoteStateReferenceArgs {
    /**
     * The remote backend hostname to connect to.
     */
    hostname?: string;
    /**
     * The name of the organization containing the targeted workspace(s).
     */
    organization: string;
    /**
     * The token used to authenticate with the remote backend.
     */
    token?: string;
    workspaces: inputs.Workspaces;
}

/**
 * The result of fetching from a Terraform state store.
 */
export interface RemoteStateReferenceResult {
    /**
     * The outputs displayed from Terraform state.
     */
    readonly outputs: {[key: string]: any};
}
/**
 * Access state from a remote backend.
 */
export function remoteStateReferenceOutput(args: RemoteStateReferenceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<RemoteStateReferenceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("terraform:index:remoteStateReference", {
        "hostname": args.hostname,
        "organization": args.organization,
        "token": args.token,
        "workspaces": args.workspaces,
    }, opts);
}

export interface RemoteStateReferenceOutputArgs {
    /**
     * The remote backend hostname to connect to.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The name of the organization containing the targeted workspace(s).
     */
    organization: pulumi.Input<string>;
    /**
     * The token used to authenticate with the remote backend.
     */
    token?: pulumi.Input<string>;
    workspaces: pulumi.Input<inputs.WorkspacesArgs>;
}
